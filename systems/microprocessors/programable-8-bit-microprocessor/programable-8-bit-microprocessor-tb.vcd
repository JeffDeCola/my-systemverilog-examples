$date
	Wed Oct 21 11:41:32 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module programable_8_bit_microprocessor_tb $end
$var wire 8 ! DATA_OUT [7:0] $end
$var wire 8 " MICROADDRESS [7:0] $end
$var reg 8 # DATA_IN_A [7:0] $end
$var reg 8 $ DATA_IN_B [7:0] $end
$var reg 1 % GO_BAR $end
$var reg 1 & JAM $end
$var reg 24 ' MW [23:0] $end
$var reg 4 ( OPCODE [3:0] $end
$var reg 1 ) RESET $end
$var reg 1 * SYSTEM_CLK $end
$scope module uut $end
$var wire 11 + CONTROL_BITS [23:13] $end
$var wire 8 , DATA_IN_A [7:0] $end
$var wire 8 - DATA_IN_B [7:0] $end
$var wire 8 . DATA_OUT [7:0] $end
$var wire 1 / EIL_BAR $end
$var wire 1 % GO_BAR $end
$var wire 1 & JAM $end
$var wire 8 0 MICROADDRESS [7:0] $end
$var wire 24 1 MW [23:0] $end
$var wire 4 2 OPCODE [3:0] $end
$var wire 1 ) RESET $end
$var wire 4 3 STATUS_BITS [3:0] $end
$var wire 1 * SYSTEM_CLK $end
$scope module CONTROL_SECTION $end
$var wire 8 4 BUFFER_IN [7:0] $end
$var wire 11 5 CONTROL_BITS [23:13] $end
$var wire 4 6 COUNTER_IN_HIGH_SIG [7:4] $end
$var wire 1 / EIL_BAR $end
$var wire 1 % GO_BAR $end
$var wire 1 7 HIGH $end
$var wire 8 8 HIGH8 [7:0] $end
$var wire 1 & JAM $end
$var wire 1 9 LOW $end
$var wire 8 : MICROADDRESS [7:0] $end
$var wire 1 ; MPC_LOAD_BAR $end
$var wire 24 < MW [23:0] $end
$var wire 4 = OPCODE [3:0] $end
$var wire 1 ) RESET $end
$var wire 4 > STATUS_BITS [3:0] $end
$var wire 1 * SYSTEM_CLK $end
$var wire 4 ? MICRO_AD_LOW [3:0] $end
$var wire 4 @ MICRO_AD_HIGH [7:4] $end
$var wire 1 A COUNT $end
$var wire 4 B BOP [12:9] $end
$scope module COUNTER_8 $end
$var wire 1 A COUNT $end
$var wire 4 C COUNTER_IN_HIGH [7:4] $end
$var wire 4 D COUNTER_IN_LOW [3:0] $end
$var wire 8 E COUNTER_OUT [7:0] $end
$var wire 1 ; MPC_LOAD_BAR $end
$var wire 1 ) RESET $end
$var wire 1 * SYSTEM_CLK $end
$upscope $end
$scope module MUX8 $end
$var wire 8 F A8 [7:0] $end
$var wire 8 G B8 [7:0] $end
$var wire 1 9 EN_BAR $end
$var wire 1 & S $end
$var wire 8 H Y8 [7:0] $end
$upscope $end
$upscope $end
$scope module PROCESSOR_SECTION $end
$var wire 11 I CONTROL_BITS [23:13] $end
$var wire 8 J DATA_IN_A [7:0] $end
$var wire 8 K DATA_IN_B [7:0] $end
$var wire 8 L DATA_OUT [7:0] $end
$var wire 8 M DATA_OUT_A [7:0] $end
$var wire 1 / EIL_BAR $end
$var wire 1 N LOW $end
$var wire 4 O STATUS_BITS [3:0] $end
$var wire 1 * SYSTEM_CLK $end
$var wire 1 P CIN $end
$var wire 1 Q B_SOURCE $end
$var wire 1 R A_SOURCE $end
$var wire 5 S ALU_FUNC [19:15] $end
$var wire 3 T ALU_DEST [23:21] $end
$scope module REGISTER_A $end
$var wire 8 U DATA_IN [7:0] $end
$var wire 8 V DATA_OUT [7:0] $end
$var wire 1 / ENABLE_CLK $end
$var wire 1 * SYSTEM_CLK $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b11110000 V
b0 U
b0 T
b0 S
0R
0Q
0P
b0 O
0N
b11110000 M
b10000 L
b0 K
b0 J
b0 I
b11111111 H
b11111111 G
b11110000 F
b11110000 E
b0 D
bz C
b0 B
0A
b0 @
b0 ?
b0 >
b0 =
b0 <
z;
b11111111 :
09
b11111111 8
17
bz 6
b0 5
b11110000 4
b0 3
b0 2
b0 1
b11111111 0
0/
b10000 .
b0 -
b0 ,
b0 +
0*
0)
b0 (
b0 '
0&
0%
b0 $
b0 #
b11111111 "
b10000 !
$end
#10
1*
#15
1)
#20
0*
#30
1*
#35
0)
#40
0*
#50
1*
#60
0*
#70
1*
#80
0*
#90
1*
#100
0*
#110
1*
#120
0*
#130
1*
#140
0*
#150
1*
#160
0*
#170
1*
#180
0*
#190
1*
#200
0*
#210
1*
#220
0*
#230
1*
#240
0*
#250
1*
#255
