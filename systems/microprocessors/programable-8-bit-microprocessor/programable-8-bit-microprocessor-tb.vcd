$date
	Thu Oct 22 07:59:05 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module programable_8_bit_microprocessor_tb $end
$var wire 8 ! MICROADDRESS [7:0] $end
$var wire 24 " MW [23:0] $end
$var wire 8 # DATA_OUT [7:0] $end
$var reg 8 $ DATA_IN_A [7:0] $end
$var reg 8 % DATA_IN_B [7:0] $end
$var reg 1 & GO_BAR $end
$var reg 1 ' JAM $end
$var reg 4 ( OPCODE [3:0] $end
$var reg 1 ) RESET $end
$var reg 1 * SYSTEM_CLK $end
$scope module CS $end
$var wire 8 + microaddress [7:0] $end
$var wire 24 , microword [23:0] $end
$var wire 13 - control_bits [23:11] $end
$var reg 3 . ALU_DEST [23:21] $end
$var reg 5 / ALU_FUNC [19:15] $end
$var reg 1 0 A_SOURCE $end
$var reg 4 1 BOP [12:9] $end
$var reg 1 2 B_SOURCE $end
$var reg 1 3 CIN $end
$var reg 1 4 COUNT $end
$var reg 4 5 MICRO_AD_HIGH [7:4] $end
$var reg 4 6 MICRO_AD_LOW [3:0] $end
$upscope $end
$scope module uut $end
$var wire 8 7 DATA_IN_A [7:0] $end
$var wire 8 8 DATA_IN_B [7:0] $end
$var wire 1 9 EIL_BAR $end
$var wire 1 & GO_BAR $end
$var wire 1 ' JAM $end
$var wire 8 : MICROADDRESS [7:0] $end
$var wire 24 ; MW [23:0] $end
$var wire 4 < OPCODE [3:0] $end
$var wire 1 ) RESET $end
$var wire 1 * SYSTEM_CLK $end
$var wire 4 = STATUS_BITS [3:0] $end
$var wire 8 > DATA_OUT [7:0] $end
$var wire 11 ? CONTROL_BITS [23:13] $end
$scope module CONTROL_SECTION $end
$var wire 8 @ BUFFER_IN [7:0] $end
$var wire 1 A COND_OUT $end
$var wire 4 B COUNTER_IN_HIGH_SIG [7:4] $end
$var wire 1 9 EIL_BAR $end
$var wire 1 & GO_BAR $end
$var wire 1 C HIGH $end
$var wire 8 D HIGH8 [7:0] $end
$var wire 1 ' JAM $end
$var wire 1 E LOW $end
$var wire 8 F MICROADDRESS [7:0] $end
$var wire 1 G MPC_LOAD_BAR $end
$var wire 24 H MW [23:0] $end
$var wire 1 I NOTHING $end
$var wire 4 J OPCODE [3:0] $end
$var wire 1 ) RESET $end
$var wire 1 * SYSTEM_CLK $end
$var wire 4 K STATUS_BITS [3:0] $end
$var wire 4 L MICRO_AD_LOW [3:0] $end
$var wire 4 M MICRO_AD_HIGH [7:4] $end
$var wire 1 N COUNT $end
$var wire 11 O CONTROL_BITS [23:13] $end
$var wire 4 P BOP [12:9] $end
$scope module COND_SELECT $end
$var wire 1 Q A $end
$var wire 1 R B $end
$var wire 1 S C $end
$var wire 1 T D0 $end
$var wire 1 E D1 $end
$var wire 1 U D2 $end
$var wire 1 V D3 $end
$var wire 1 & D4 $end
$var wire 1 W D5 $end
$var wire 1 E D6 $end
$var wire 1 E D7 $end
$var wire 1 E EN_BAR $end
$var wire 1 A W $end
$var wire 1 I Y $end
$upscope $end
$scope module COUNTER_8 $end
$var wire 1 N COUNT $end
$var wire 4 X COUNTER_IN_HIGH [7:4] $end
$var wire 4 Y COUNTER_IN_LOW [3:0] $end
$var wire 8 Z COUNTER_OUT [7:0] $end
$var wire 1 G MPC_LOAD_BAR $end
$var wire 1 ) RESET $end
$var wire 1 * SYSTEM_CLK $end
$upscope $end
$scope module MUX8 $end
$var wire 8 [ A8 [7:0] $end
$var wire 8 \ B8 [7:0] $end
$var wire 1 E EN_BAR $end
$var wire 1 ' S $end
$var wire 8 ] Y8 [7:0] $end
$upscope $end
$scope module OPCODEDEC0 $end
$var wire 1 9 EIL_BAR $end
$var wire 4 ^ MW_AD_HIGH [7:4] $end
$var wire 4 _ MW_BOP [12:9] $end
$var wire 4 ` OPCODE [3:0] $end
$var wire 4 a TO_COUNTER [7:4] $end
$upscope $end
$scope module XOR_2 $end
$var wire 1 b A $end
$var wire 1 A B $end
$var wire 1 G Y $end
$upscope $end
$upscope $end
$scope module PROCESSOR_SECTION $end
$var wire 8 c ALU_IN_A [7:0] $end
$var wire 8 d ALU_IN_B [7:0] $end
$var wire 8 e ALU_OUT [7:0] $end
$var wire 11 f CONTROL_BITS [23:13] $end
$var wire 8 g DATA_IN_A [7:0] $end
$var wire 8 h DATA_IN_B [7:0] $end
$var wire 8 i DATA_OUT [7:0] $end
$var wire 8 j DATA_OUT_A [7:0] $end
$var wire 8 k DATA_OUT_B [7:0] $end
$var wire 8 l DATA_OUT_TA [7:0] $end
$var wire 8 m DATA_OUT_TB [7:0] $end
$var wire 1 9 EIL_BAR $end
$var wire 8 n IN_ZP [7:0] $end
$var wire 1 o LOW $end
$var wire 1 * SYSTEM_CLK $end
$var wire 4 p STATUS_BITS [3:0] $end
$var wire 1 q CIN $end
$var wire 1 r B_SOURCE $end
$var wire 1 s A_SOURCE $end
$var wire 5 t ALU_FUNC [19:15] $end
$var wire 3 u ALU_DEST [23:21] $end
$scope module ALU1 $end
$var wire 5 v ALU_FUNC [19:15] $end
$var wire 1 w C4 $end
$var wire 1 x C8 $end
$var wire 1 q CIN $end
$var wire 8 y IN_A [7:0] $end
$var wire 8 z IN_B [7:0] $end
$var wire 8 { OUT8 [7:0] $end
$var wire 1 | Z $end
$upscope $end
$scope module F_REGISTER $end
$var wire 8 } DATA_IN [7:0] $end
$var wire 8 ~ DATA_OUT [7:0] $end
$var wire 1 !" ENABLE_CLK $end
$var wire 1 * SYSTEM_CLK $end
$upscope $end
$scope module MUX_A $end
$var wire 8 "" A8 [7:0] $end
$var wire 8 #" B8 [7:0] $end
$var wire 1 o EN_BAR $end
$var wire 1 s S $end
$var wire 8 $" Y8 [7:0] $end
$upscope $end
$scope module MUX_B $end
$var wire 8 %" A8 [7:0] $end
$var wire 8 &" B8 [7:0] $end
$var wire 1 o EN_BAR $end
$var wire 1 r S $end
$var wire 8 '" Y8 [7:0] $end
$upscope $end
$scope module REGISTERA $end
$var wire 8 (" DATA_IN [7:0] $end
$var wire 8 )" DATA_OUT [7:0] $end
$var wire 1 9 ENABLE_CLK $end
$var wire 1 * SYSTEM_CLK $end
$upscope $end
$scope module REGISTERB $end
$var wire 8 *" DATA_IN [7:0] $end
$var wire 8 +" DATA_OUT [7:0] $end
$var wire 1 9 ENABLE_CLK $end
$var wire 1 * SYSTEM_CLK $end
$upscope $end
$scope module TEMP_REGISTER_A $end
$var wire 8 ," DATA_IN [7:0] $end
$var wire 8 -" DATA_OUT [7:0] $end
$var wire 1 ." ENABLE_CLK $end
$var wire 1 * SYSTEM_CLK $end
$upscope $end
$scope module TEMP_REGISTER_B $end
$var wire 8 /" DATA_IN [7:0] $end
$var wire 8 0" DATA_OUT [7:0] $end
$var wire 1 1" ENABLE_CLK $end
$var wire 1 * SYSTEM_CLK $end
$upscope $end
$scope module ZP_BIT1 $end
$var wire 8 2" F8 [7:0] $end
$var wire 1 3" ZP_BAR $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
13"
b11110000 2"
11"
b11110000 0"
b11110000 /"
1."
b11110000 -"
b11110000 ,"
b11110000 +"
b0 *"
b11110000 )"
b0 ("
b100 '"
b11110000 &"
b11110000 %"
b100 $"
b11110000 #"
b11110000 ""
1!"
b11110000 ~
b11110000 }
1|
b11110000 {
b100 z
b100 y
1x
1w
b11111 v
b111 u
b11111 t
1s
1r
1q
b1111 p
0o
b11110000 n
b11110000 m
b11110000 l
b11110000 k
b11110000 j
b11110000 i
b0 h
b0 g
b11111111111 f
b11110000 e
b100 d
b100 c
1b
b11 a
b0 `
b1111 _
b11 ^
b100 ]
b11111111 \
b11110000 [
b11110000 Z
b111 Y
b11 X
1W
1V
1U
1T
1S
1R
1Q
b1111 P
b11111111111 O
1N
b11 M
b111 L
b1111 K
b0 J
1I
b111111111111111100110111 H
1G
b100 F
0E
b11111111 D
1C
b11 B
1A
b11110000 @
b11111111111 ?
b11110000 >
b1111 =
b0 <
b111111111111111100110111 ;
b100 :
19
b0 8
b0 7
b111 6
b11 5
14
13
12
b1111 1
10
b11111 /
b111 .
b11111111111 -
b111111111111111100110111 ,
b100 +
0*
0)
b0 (
0'
0&
b0 %
b0 $
b11110000 #
b111111111111111100110111 "
b100 !
$end
#10
1*
#15
1)
#20
0*
#30
1*
#35
0)
#40
0*
#50
1*
#60
0*
#70
1*
#75
1&
b11 %
b11 8
b11 h
b11 *"
b100 $
b100 7
b100 g
b100 ("
b1 (
b1 <
b1 J
b1 `
#80
0*
#90
1*
#95
0&
#100
0*
#110
1*
#120
0*
#130
1*
#140
0*
#150
1*
#160
0*
#170
1*
#180
0*
#190
1*
#195
1&
b10 %
b10 8
b10 h
b10 *"
b111 $
b111 7
b111 g
b111 ("
b10 (
b10 <
b10 J
b10 `
#200
0*
#210
1*
#215
0&
#220
0*
#230
1*
#240
0*
#250
1*
#260
0*
#270
1*
#280
0*
#290
1*
#300
0*
#310
1*
#320
0*
#330
1*
#335
